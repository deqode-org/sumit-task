{"version":3,"sources":["constants.js","Api/index.js","Components/SuggestionBox/index.jsx","Components/AutoSuggestInput/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["KEYS_MAPPING","ENTER","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","SuggestionBox","suggestions","this","props","showDropdown","length","onOutsideClick","closeDropdown","className","map","suggestion","index","highlightIndex","key","onClick","suggestionSelected","React","Component","AutoSuggestInput","getSuggestedOptions","textToSearch","then","data","setState","catch","error","console","log","onInputChange","event","lastText","state","split","slice","target","value","debouncedInputChange","resetSuggestions","join","inputRef","current","focus","onKeyPressed","e","keyPressed","which","createRef","debounce","type","placeholder","onChange","onKeyDown","ref","Dashboard","Paths","Redirect","Routes","path","component","from","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be43d44a.chunk.js","sourcesContent":["const KEYS_MAPPING = {\n  ENTER: 13,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n};\n\nexport default KEYS_MAPPING;\n","// Using mock code, as provided\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport OnOutsiceClick from \"react-outclick\";\nimport \"./suggestionBox.css\";\n\n// The Dropdown Box\nclass SuggestionBox extends React.Component {\n  render() {\n    const { suggestions } = this.props;\n    const showDropdown = suggestions.length > 0;\n\n    return (\n      <OnOutsiceClick\n        onOutsideClick={() => {\n          this.props.closeDropdown();\n        }}\n      >\n        <ul\n          className={`dropdown-menu dropdown-menu-end ${showDropdown ? \"show\" : \"hide\"}`}\n        >\n          {suggestions.map((suggestion, index) => (\n            <li\n              className={`dropdown-item ${this.props.highlightIndex === index && \"highlight\"}`}\n              key={suggestion}\n              onClick={() => this.props.suggestionSelected(suggestion)}\n            >\n              {suggestion}\n            </li>\n          ))}\n        </ul>\n      </OnOutsiceClick>\n    );\n  }\n}\n\nexport default SuggestionBox;\n","import React from \"react\";\nimport KEYS_MAPPING from \"../../constants\";\nimport getSuggestions from \"../../Api\";\nimport SuggestionBox from \"../SuggestionBox\";\nimport { debounce } from \"lodash\";\n\nclass AutoSuggestInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      suggestions: [],\n      highlightIndex: 0,\n    };\n\n    // Creating the ref to input for the focus\n    this.inputRef = React.createRef();\n    this.debouncedInputChange = debounce(this.getSuggestedOptions, 500);\n  }\n\n  getSuggestedOptions = (textToSearch) => {\n    getSuggestions(textToSearch)\n      .then((data) => {\n        this.setState({\n          suggestions: data,\n          highlightIndex: 0,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Got error in getting data\");\n      });\n  }\n\n  onInputChange = (event) => {\n    const lastText = this.state.text.split(\" \").slice(-1)[0];\n    const textToSearch = event.target.value.split(\" \").slice(-1)[0];\n\n    this.setState({ text: event.target.value });\n\n    // Checking if the last text is empty or the last word has changes\n    if (!!textToSearch && lastText !== textToSearch) {\n      this.debouncedInputChange(textToSearch)\n    } else {\n      this.resetSuggestions();\n    }\n  }\n\n  // Append the selected suggested word to the text\n  suggestionSelected = (suggestion) => {\n    const text = this.state.text.split(\" \").slice(0, -1).join(\" \");\n\n    this.setState({ text: `${text} ${suggestion} ` });\n    this.resetSuggestions();\n    this.inputRef.current.focus();\n  }\n\n  onKeyPressed = (e) => {\n    const { suggestions, highlightIndex } = this.state;\n\n    if (suggestions.length === 0) {\n      return;\n    }\n\n    const keyPressed = e.which;\n\n    if (keyPressed === KEYS_MAPPING.UP_ARROW) {\n      // Logic to move up\n      this.setState({\n        highlightIndex: highlightIndex === 0 ? suggestions.length - 1 : highlightIndex - 1,\n      });\n    } else if (keyPressed === KEYS_MAPPING.DOWN_ARROW) {\n      // Logic to move down\n      this.setState({\n        highlightIndex: highlightIndex === suggestions.length - 1 ? 0 : highlightIndex + 1,\n      });\n    } else if (keyPressed === KEYS_MAPPING.ENTER) {\n      // Logic to add the suggestion to text\n      this.suggestionSelected(suggestions[highlightIndex]);\n    }\n  }\n\n  resetSuggestions = () => {\n    this.setState({\n      suggestions: [],\n      highlightIndex: 0,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"input-group\">\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Search\"\n            value={this.state.text}\n            onChange={(e) => this.onInputChange(e)}\n            onKeyDown={(e) => this.onKeyPressed(e)}\n            ref={this.inputRef}\n          />\n          <SuggestionBox\n            suggestions={this.state.suggestions}\n            highlightIndex={this.state.highlightIndex}\n            closeDropdown={() => this.resetSuggestions()}\n            suggestionSelected={(suggestion) => this.suggestionSelected(suggestion)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AutoSuggestInput;\n","import React from \"react\";\nimport AutoSuggestInput from \"../../Components/AutoSuggestInput\";\n\nconst Dashboard = () => (\n  <div className=\"col-md-4 offset-md-4\">\n    <AutoSuggestInput />\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}